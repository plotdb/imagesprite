// Generated by LiveScript 1.6.0
(function(){
  var fs, fsExtra, spritesmith, path, imageminPngquant, util, pngmin, buildPng;
  fs = require('fs');
  fsExtra = require('fs-extra');
  spritesmith = require('spritesmith');
  path = require('path');
  imageminPngquant = require('imagemin-pngquant');
  util = require('./util');
  pngmin = imageminPngquant({
    speed: 1,
    strip: true,
    quality: [0.7, 0.8]
  });
  buildPng = function(opt){
    return new Promise(function(res, rej){
      var files, root, css, e;
      try {
        if (opt.root.endsWith('/')) {
          opt.root.replace(/\/$/, '');
        }
        if (opt.files) {
          files = opt.files.filter(function(it){
            return it;
          });
        } else {
          files = util.files(opt.root, {
            rule: opt.rule
          }).map(function(it){
            return path.join(it.root, it.path);
          });
        }
        root = opt.root || '.';
        css = ["." + opt.name + " {\n  display: inline-block;\n  position: relative;\n}\n." + opt.name + ":before {\n  content: \" \";\n  width: 100%;\n  display: block;\n  background-image: url(" + path.join(opt.base, opt.name + '.min.png') + ");\n}"];
        return spritesmith.run({
          src: files
        }, function(err, ret){
          var sdim, k, v, promise;
          fsExtra.ensureDirSync(opt.outdir);
          fs.writeFileSync(path.join(opt.outdir, opt.name + '.png'), ret.image);
          sdim = ret.properties;
          (function(){
            var ref$, results$ = [];
            for (k in ref$ = ret.coordinates) {
              v = ref$[k];
              results$.push([k, v]);
            }
            return results$;
          }()).map(function(arg$){
            var k, v, idim, kn, paddingTop, bksize, bkposX, bkposY;
            k = arg$[0], v = arg$[1];
            idim = v;
            k = k.replace(root, '').replace(/^\//, '');
            kn = (k + "").replace(/\.png/, '');
            if (opt.prefix) {
              k = path.join(opt.prefix, k);
            }
            paddingTop = idim.height / idim.width * 100 + "%!important";
            bksize = sdim.width / idim.width * 100 + "%";
            bkposX = (idim.x / sdim.width) * (sdim.width / idim.width) / (sdim.width / idim.width - 1) * 100 + "%";
            bkposY = (idim.y / sdim.height) * (sdim.height / idim.height) / (sdim.height / idim.height - 1) * 100 + "%";
            return css.push("." + opt.name + "[data-name=\"" + kn + "\"] {\n  width: " + idim.width + "px;\n}\n." + opt.name + "[data-name=\"" + kn + "\"]:before {\n  background-size: " + bksize + ";\n  background-position: " + bkposX + " " + bkposY + ";\n  padding-top: " + paddingTop + "\n}");
          });
          promise = opt.outdir
            ? (fs.writeFileSync(path.join(opt.outdir, opt.name + '.css'), css.join('')), pngmin(ret.image).then(function(output){
              return fs.writeFileSync(path.join(opt.outdir, opt.name + '.min.png'), output);
            }))
            : Promise.resolve();
          return promise.then(function(){
            return res({
              coord: ret.coordinates,
              dimension: sdim
            });
          });
        });
      } catch (e$) {
        e = e$;
        return rej(e);
      }
    });
  };
  module.exports = buildPng;
}).call(this);
