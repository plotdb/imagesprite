// Generated by LiveScript 1.6.0
(function(){
  var fs, fsExtra, spritesmith, path, imageminPngquant, uglifycss, util, pngmin, buildPng;
  fs = require('fs');
  fsExtra = require('fs-extra');
  spritesmith = require('spritesmith');
  path = require('path');
  imageminPngquant = require('imagemin-pngquant');
  uglifycss = require('uglifycss');
  util = require('./util');
  pngmin = imageminPngquant({
    speed: 1,
    strip: true,
    quality: [0.7, 0.8]
  });
  buildPng = function(opt){
    return new Promise(function(res, rej){
      var files, root, e;
      try {
        if (opt.root.endsWith('/')) {
          opt.root.replace(/\/$/, '');
        }
        if (opt.files) {
          files = opt.files.filter(function(it){
            return it;
          });
        } else {
          files = util.files(opt.root, {
            rule: opt.rule
          }).map(function(it){
            return path.join(it.root, it.path);
          });
        }
        root = opt.root || '.';
        return spritesmith.run({
          src: files
        }, function(err, ret){
          var sdim, list, k, v, same, css, cssMin, promise;
          fsExtra.ensureDirSync(opt.outdir);
          fs.writeFileSync(path.join(opt.outdir, opt.fname + '.png'), ret.image);
          sdim = ret.properties;
          list = (function(){
            var ref$, results$ = [];
            for (k in ref$ = ret.coordinates) {
              v = ref$[k];
              results$.push([k, v]);
            }
            return results$;
          }()).map(function(arg$){
            var k, idim, name, paddingTop, bksize, bkpos;
            k = arg$[0], idim = arg$[1];
            name = k.replace(root, '').replace(/^\//, '').replace(/\.png$/, '');
            if (opt.prefix) {
              name = path.join(opt.prefix, name);
            }
            paddingTop = idim.height / idim.width * 100 + "%!important";
            bksize = sdim.width / idim.width * 100 + "%";
            bkpos = {
              x: (idim.x / sdim.width) * (sdim.width / idim.width) / (sdim.width / idim.width - 1) * 100 + "%",
              y: (idim.y / sdim.height) * (sdim.height / idim.height) / (sdim.height / idim.height - 1 || 1) * 100 + "%"
            };
            return {
              width: idim.width,
              name: name,
              paddingTop: paddingTop,
              bksize: bksize,
              bkpos: bkpos
            };
          });
          same = {};
          ['width', 'paddingTop', 'bksize'].map(function(n){
            var ret;
            if ((ret = Array.from(new Set(list.map(function(it){
              return it[n];
            })))).length) {
              return same[n] = ret[0];
            }
          });
          css = ["." + opt.cname + " {\n  display: inline-block;\n  position: relative;\n  " + (same.width ? "width: " + same.width + "px" : '') + "\n}\n." + opt.cname + ":before {\n  content: \" \";\n  width: 100%;\n  display: block;\n  background-image: url(" + path.join(opt.base, opt.fname + '.min.png') + ");\n  " + (same.paddingTop ? "padding-top: " + same.paddingTop + ";" : '') + "\n  " + (same.bksize ? "background-size: " + same.bksize + ";" : '') + "\n}"];
          list.map(function(arg$){
            var name, width, paddingTop, bksize, bkpos, styles, k, v;
            name = arg$.name, width = arg$.width, paddingTop = arg$.paddingTop, bksize = arg$.bksize, bkpos = arg$.bkpos;
            if (!same.width) {
              css.push("." + opt.cname + "[n=" + name + "] { width: " + width + "px; }");
            }
            styles = {
              bksize: "background-size: " + bksize + ";",
              bkpos: "background-position: " + bkpos.x + " " + bkpos.y + ";",
              paddingTop: "padding-top: " + paddingTop
            };
            styles = (function(){
              var ref$, results$ = [];
              for (k in ref$ = styles) {
                v = ref$[k];
                results$.push({
                  k: k,
                  v: v
                });
              }
              return results$;
            }()).filter(function(it){
              return !(same[it.k] != null);
            }).map(function(it){
              return it.v;
            });
            return css.push("." + opt.cname + "[n=" + name + "]:before {\n  " + styles + "\n}");
          });
          css = css.join('');
          cssMin = uglifycss.processString(css, {
            uglyComments: true
          });
          promise = opt.outdir
            ? (fs.writeFileSync(path.join(opt.outdir, opt.fname + '.css'), css), fs.writeFileSync(path.join(opt.outdir, opt.fname + '.min.css'), cssMin), pngmin(ret.image).then(function(output){
              return fs.writeFileSync(path.join(opt.outdir, opt.fname + '.min.png'), output);
            }))
            : Promise.resolve();
          return promise.then(function(){
            return res({
              coord: ret.coordinates,
              dimension: sdim
            });
          });
        });
      } catch (e$) {
        e = e$;
        return rej(e);
      }
    });
  };
  module.exports = buildPng;
}).call(this);
