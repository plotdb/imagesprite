// Generated by LiveScript 1.6.0
(function(){
  var fs, fsExtra, path, jsdom, svgo, uglifycss, util, opt, getDim, handleSvg, buildSvg;
  fs = require('fs');
  fsExtra = require('fs-extra');
  path = require('path');
  jsdom = require('jsdom');
  svgo = require('svgo');
  uglifycss = require('uglifycss');
  util = require('./util');
  opt = {
    plugins: ["minifyStyles"]
  };
  jsdom = jsdom.JSDOM;
  getDim = function(svg){
    var document, viewBox, width, height;
    document = new jsdom(svg).window.document;
    svg = document.querySelector('svg');
    viewBox = (svg.getAttribute('viewBox') || '0 0 100 100').split(' ');
    width = +((svg.style.width || svg.getAttribute('width') || viewBox[2]) + "").replace(/[^0-9]+$/, '');
    height = +((svg.style.height || svg.getAttribute('height') || viewBox[3]) + "").replace(/[^0-9]+$/, '');
    return {
      width: width,
      height: height
    };
  };
  handleSvg = function(list){
    var promise;
    return promise = new Promise(function(res, rej){
      var sdim, code, coordinates, _;
      sdim = {
        width: 0,
        height: 0
      };
      code = [];
      coordinates = [];
      _ = function(list){
        var file, data;
        file = list.splice(0, 1)[0];
        if (!file) {
          return res({
            sdim: sdim,
            code: code,
            coordinates: coordinates
          });
        }
        data = fs.readFileSync(path.join(file.root, file.path)).toString();
        return Promise.resolve(svgo.optimize(data, opt)).then(function(it){
          var ref$, width, height, x, y, ret;
          ref$ = getDim(it.data), width = ref$.width, height = ref$.height;
          ref$ = [sdim.width, 0], x = ref$[0], y = ref$[1];
          if (height > sdim.height) {
            sdim.height = height;
          }
          ret = Buffer.from(it.data).toString('base64');
          code.push("<image x=\"" + x + "\" y=\"" + y + "\" width=\"" + width + "\" height=\"" + height + "\" xlink:href=\"data:image/svg+xml;base64," + ret + "\"/>");
          coordinates[file.path] = {
            x: x,
            y: y,
            width: width,
            height: height
          };
          sdim.width += width + 2;
          return _(list);
        });
      };
      return _(list);
    });
  };
  buildSvg = function(opt){
    var fname, cname, outdir, base, cwd, list;
    opt == null && (opt = {});
    fname = opt.fname || 'svg-sprite';
    cname = opt.cname || 'svg-sprite';
    outdir = opt.outdir;
    base = opt.base;
    cwd = process.cwd();
    if (opt.root.endsWith('/')) {
      opt.root.replace(/\/$/, '');
    }
    if (opt.files) {
      list = opt.files.filter(function(it){
        return it;
      }).map(function(it){
        var p;
        p = it.replace(opt.root, '');
        return {
          root: opt.root,
          path: p
        };
      });
    } else {
      util.recurse(opt.root, {
        rule: /\.svg$/
      }, list = []);
    }
    return handleSvg(list).then(function(arg$){
      var sdim, code, coordinates, ret, bkimg, list, k, v, same, css, cssMin;
      sdim = arg$.sdim, code = arg$.code, coordinates = arg$.coordinates;
      ret = {};
      ret.image = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" preserveAspectRatio=\"none\" viewBox=\"0 0 " + sdim.width + " " + sdim.height + "\" width=\"" + sdim.width + "\" height=\"" + sdim.height + "\">\n" + code.join('\n') + "\n</svg>";
      bkimg = base && fname ? "background-image: url(" + path.join(base, fname + '.svg') + ");" : "";
      list = (function(){
        var ref$, results$ = [];
        for (k in ref$ = coordinates) {
          v = ref$[k];
          results$.push([k, v]);
        }
        return results$;
      }()).map(function(arg$){
        var k, idim, name, paddingTop, bksize, bkpos;
        k = arg$[0], idim = arg$[1];
        name = k.replace(opt.root, '').replace(/^\//, '').replace(/\.svg/, '');
        if (opt.prefix) {
          name = path.join(opt.prefix, name);
        }
        paddingTop = idim.height / idim.width * 100 + "%!important";
        bksize = sdim.width / idim.width * 100 + "%";
        bkpos = {
          x: (idim.x / sdim.width) * (sdim.width / idim.width) / (sdim.width / idim.width - 1) * 100 + "%",
          y: ((idim.y || 0) / sdim.height) * (sdim.height / idim.height) / (sdim.height / idim.height - 1 || 1) * 100 + "%"
        };
        return {
          width: idim.width,
          name: name,
          paddingTop: paddingTop,
          bksize: bksize,
          bkpos: bkpos
        };
      });
      same = {};
      ['width', 'paddingTop', 'bksize'].map(function(n){
        var ret;
        if ((ret = Array.from(new Set(list.map(function(it){
          return it[n];
        })))).length) {
          return same[n] = ret[0];
        }
      });
      css = ["." + cname + " {\n  display: inline-block;\n  position: relative;\n  " + (same.width ? "width: " + same.width + "px" : '') + "\n}\n." + cname + ":before {\n  content: \" \";\n  width: 100%;\n  display: block;\n  " + bkimg + "\n  " + (same.paddingTop ? "padding-top: " + same.paddingTop + ";" : '') + "\n  " + (same.bksize ? "background-size: " + same.bksize + ";" : '') + "\n}"];
      list.map(function(arg$){
        var name, width, paddingTop, bksize, bkpos, styles, k, v;
        name = arg$.name, width = arg$.width, paddingTop = arg$.paddingTop, bksize = arg$.bksize, bkpos = arg$.bkpos;
        if (!same.width) {
          css.push("." + cname + "[n=" + name + "] { width: " + width + "px; }");
        }
        styles = {
          bksize: "background-size: " + bksize + ";",
          bkpos: "background-position: " + bkpos.x + " " + bkpos.y + ";",
          paddingTop: "padding-top: " + paddingTop
        };
        styles = (function(){
          var ref$, results$ = [];
          for (k in ref$ = styles) {
            v = ref$[k];
            results$.push({
              k: k,
              v: v
            });
          }
          return results$;
        }()).filter(function(it){
          return !(same[it.k] != null);
        }).map(function(it){
          return it.v;
        });
        return css.push("." + cname + "[n=" + name + "]:before {\n  " + styles + "\n}");
      });
      ret.css = css.join('\n');
      ret.coord = coordinates;
      ret.dimension = sdim;
      if (outdir) {
        cssMin = uglifycss.processString(ret.css, {
          uglyComments: true
        });
        fsExtra.ensureDirSync(outdir);
        fs.writeFileSync(path.join(outdir, fname + ".svg"), ret.image);
        fs.writeFileSync(path.join(outdir, fname + ".css"), ret.css);
        fs.writeFileSync(path.join(outdir, fname + ".min.css"), cssMin);
      }
      return ret;
    });
  };
  module.exports = buildSvg;
}).call(this);
